  METHOD constructor.
    me->pp_customizing_entry = pp_customizing_entry.
    me->selection_screen_selection = selection_screen_selection.
    
"Bais-spezifische Logik! Für die Cash-Komponente...hier zB SimpleFactory implementieren, 
"die ausliest, welches Produkt gerade die Prozessanzeige nutzt und entsprechendes Verhalten zurückgibt.

*    SPLIT me->pp_customizing_entry-dfval_orig AT '!' INTO differentiation_criteria cash_component.
*    me->pp_customizing_entry-cash_comp = cash_component.
*    DATA(cash_component_checker) = NEW /drt/cl_cd_cc_checker_creator( )->/drt/if_cd_cc_checker_creator~create_cash_comp_activ_checker(
*                                                                                                   selection_screen_selection = selection_screen_selection
*                                                                                                   pp_group                   = 'BS_CC' ).
*    me->flag_active_cash_component = cash_component_checker->check_comp_is_active( cash_component ).
  ENDMETHOD.
  
  "hier sämtliche Methoden als Teil eines BAIS-spezifischen PP-Cust-Entry-Interfaces implementieren, an den Stellen wo aufgerufen -> casten.
  
  METHOD /drt/if_cd_pp_cust_entry~get_cash_component.
    result = me->cash_component.
  ENDMETHOD.


  METHOD /drt/if_cd_pp_cust_entry~get_flag_active_cash_component.
    result = flag_active_cash_component.
  ENDMETHOD.
  
  METHOD /drt/if_cd_pp_cust_entry~has_cash_component.
    IF cash_component IS NOT INITIAL.
      result = abap_true.
    ELSE.
      result = abap_false.
    ENDIF.
  ENDMETHOD.


  METHOD /drt/if_cd_pp_cust_entry~is_cash_comp_exists_but_deact.
    IF flag_active_cash_component EQ abap_false AND cash_component IS NOT INITIAL.
      result = abap_true.
    ELSE.
      result = abap_false.
    ENDIF.
  ENDMETHOD.
